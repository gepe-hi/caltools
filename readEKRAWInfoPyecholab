###############################################################################
### pyEcholab
###############################################################################

import sys
import matplotlib.pyplot as plt
#import os
#import echolab2
#import lzma
#from matplotlib.pyplot import figure, show, subplots_adjust, get_cmap
import numpy as np
import glob
from echolab2.instruments import EK80
from echolab2.plotting.matplotlib import echogram
from scipy import io
import pandas as pd

#rawfiles ='C:/Users/a32685/Documents/PythonScripts/EK80/N1-D20201106-T015512.raw'
#rawfiles =  'C:/Users/a32685/Documents/Projects/2020_CRIMAC/Ex/CRIMAC_EK80Test_GOSars.raw'
#rawfiles = 'C:/Users/a32685/Documents/Projects/2020_CRIMAC/CRIMACHackEx/CRIMAC_2020_EK80_FM_DemoFile_GOSars.raw'
#rawfiles = 'C:/Users/a32685/Documents/Projects/2020_CRIMAC/CRIMACHackEx/cal-babak-D20201120-T080856.raw'
#rawfiles = 'D:\\CRIMAC\\TestGridIn\\active 100421-D20210410-T142935.raw'

useChannel=1

# A small snippet that will be used later

def my_range(start, end, step):
    while start <= end:
        yield start
        start += step


Channel=0
PingNo=0

#rawFiles = glob.glob('C:/Users/a32685/Documents/Projects/2020_CRIMAC/CRIMACHackEx/FM_CW/*.raw')
# rawFiles = glob.glob('//ces/cruise_data/2023/S2023001004_PGOSARS_4174/ACOUSTIC/EK80/EK80_RAWDATA/*.raw')
rawFiles = glob.glob('/mnt/c/Users/a32685/Documents/Matlab/TT25/Test/in/*.raw')

###############################################################################
# Initialise
###############################################################################
ek80 = EK80.EK80()
ek80.read_raw(rawFiles)
ek80.__dict__

raw_list = ek80.raw_data[ek80.channel_ids[Channel]]
raw_data = raw_list[0]
Type=raw_data.configuration[0]['transceiver_type']
Frequency=raw_data.configuration[0]['transducer_frequency']
filenameRaw=raw_data.configuration[0]['file_name']

rawDictType=[]
rawDictPower=[]
rawDictPulseDuration=[]
rawDictGain=[]
rawDictPingTime=[]
rawDictID=[]
rawDictFrequency=[]

Type=raw_data.configuration[0]['transceiver_type']
Frequency=raw_data.configuration[0]['transducer_frequency']
filenameRaw=raw_data.configuration[0]['file_name']

SampleCount=np.ndarray.tolist(np.array(raw_data.sample_count[PingNo]))
sampleOffset=np.ndarray.tolist(np.array(raw_data.sample_offset[PingNo])) # Sample offset for PingNo

# Q1_real=np.ndarray.tolist(np.real(raw_data.complex[PingNo][:][:,0]))
# Q1_imag=np.ndarray.tolist(np.imag(raw_data.complex[PingNo][:][:,0]))
# Q2_real=np.ndarray.tolist(np.real(raw_data.complex[PingNo][:][:,1]))
# Q2_imag=np.ndarray.tolist(np.imag(raw_data.complex[PingNo][:][:,1]))
# Q3_real=np.ndarray.tolist(np.real(raw_data.complex[PingNo][:][:,2]))
# Q3_imag=np.ndarray.tolist(np.imag(raw_data.complex[PingNo][:][:,2]))
# Q4_real=np.ndarray.tolist(np.real(raw_data.complex[PingNo][:][:,3]))
# Q4_imag=np.ndarray.tolist(np.imag(raw_data.complex[PingNo][:][:,3]))

for i in my_range(0, len(rawFiles)-1, 1):
    print('file no. ' + str(i) + ' of ' + str(len(rawFiles)))
    ek80 = EK80.EK80()
    ek80.read_raw(rawFiles[i])  
    lenChannels=len(ek80.raw_data)
    for j in my_range(0,lenChannels-1,1):
        ek80.__dict__
        #print(ek80.channel_ids)
        # read raw data from second channel
        raw_list = ek80.raw_data[ek80.channel_ids[j]]
        raw_data = raw_list[0]
        calibration = raw_data.get_calibration()
        
        # if raw_data.data_type==''
        rawDictType.append(format(raw_data.data_type))
        rawDictPower.append(raw_data.transmit_power.astype(int))
        rawDictPulseDuration.append(raw_data.pulse_duration)
        rawDictGain.append(calibration.gain)
        rawDictGain.append(calibration.gain)
        rawDictPingTime.append(raw_data.ping_time.astype(str))
        rawDictID.append(raw_data.channel_id)
        rawDictFrequency.append(raw_data.configuration[0]['transducer_frequency'])
    
# # io.savemat('WindSys.mat', {'Type': rawDictType, 'Power': rawDictPower, 'pulseDuration': rawDictPulseDuration, 
#                             # 'gain': rawDictGain, 'pingTime': rawDictPingTime, 'ID': rawDictID})

data={'ID':rawDictID, 'Type':rawDictType, 'Frequency':rawDictFrequency, 'Power':rawDictPower}
df = pd.DataFrame.from_dict(data)
# df=df.explode(['Power'])

# p_rx_e_n = Calculation.calcPower(y_pc_n, z_td_e, z_rx_e,N_u)